@model FPCS.Web.Admin.Models.Worker.WorkerEditModel

<div class="row-fluid">
    <div class="span12 ">
            <div class="row-fluid">
                <div class="span12 ">

                    @using (Html.BeginForm("_Edit", "Worker", FormMethod.Post, new { id = "editWorkerForm", @class = "form-horizontal" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="control-group">
                            <div class="controls">
                                <h3 class="lighter block green">Редактирование данных о сотруднике</h3>
                            </div>
                        </div>

                        <div class="controls">
                            @Html.ValidationSummary(true)
                        </div>

                        @Html.HiddenFor(x => x.WorkerId);

                        <div class="control-group">
                            @Html.LabelFor(x => x.FIO, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(x => x.FIO, new { placeholder = Html.DisplayNameFor(x => x.FIO), @class = "span9" })
                                @Html.ValidationMessageFor(m => m.FIO)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Job, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(x => x.Job, new { placeholder = Html.DisplayNameFor(x => x.Job), @class = "span9" })
                                @Html.ValidationMessageFor(m => m.Job)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.DateStart, new { @class = "control-label" })
                            <div class="controls ">
                                <div class="row-fluid input-append">
                                    @Html.TextBoxFor(x => x.DateStart, "{0:dd.MM.yyyy}", new { placeholder = Html.DisplayNameFor(x => x.DateStart), @class = "span3 date-picker", data_date_format = "dd.MM.yyyy" })
                                    <span class="add-on">
                                        <i class="icon-calendar"></i>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.DateStart)
                                </div>
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.DateFinish, new { @class = "control-label" })
                            <div class="controls ">
                                <div class="row-fluid input-append">
                                    @Html.TextBoxFor(x => x.DateFinish, "{0:dd.MM.yyyy}", new { placeholder = Html.DisplayNameFor(x => x.DateFinish), @class = "span3 date-picker", data_date_format = "dd.MM.yyyy" })
                                    <span class="add-on">
                                        <i class="icon-calendar"></i>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.DateFinish)
                                </div>
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Phone, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(x => x.Phone, new { placeholder = Html.DisplayNameFor(x => x.Phone), @class = "span9" })
                                @Html.ValidationMessageFor(m => m.Phone)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.CellPhone, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(x => x.CellPhone, new { placeholder = Html.DisplayNameFor(x => x.CellPhone), @class = "span9" })
                                @Html.ValidationMessageFor(m => m.CellPhone)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Email, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(x => x.Email, new { placeholder = Html.DisplayNameFor(x => x.Email), @class = "span9" })
                                @Html.ValidationMessageFor(m => m.Email)
                            </div>
                        </div>
                        <div class="form-actions">
                            <button class="btn btn-success editWorkerSend" type="button">
                                <i class="icon-ok bigger-110"></i>
                                Сохранить сотрудника
                            </button>
                            <button onclick="javascript:fpcs.closeDialog()" class="btn btn-info" type="button">
                                <i class="icon-reply bigger-110"></i>
                                Отменить
                            </button>
                        </div>
                    }

                </div>
            </div>

    </div>

</div>

<script type="text/javascript">
    jQuery(function ($) {
        fpcs.initDatePicker();
    });
</script>
@Html.Script(Scripts.Render("~/bundles/jqueryval"))