@model FPCS.Web.Admin.Models.User.UserEditModel

<div class="row-fluid">
    <div class="span12 ">

        @using (Html.BeginForm("_Edit", "User", FormMethod.Post, new { id = "editUserForm", @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
   
            <div class="control-group">
                <div class="controls">
                    <h3 class="lighter block green">On this page you can edit the User account</h3>
                </div>
            </div>
    
            <div class="controls">
                @Html.ValidationSummary(true)
            </div>
    
            @Html.HiddenFor(x => x.DbUserId)

            <div class="control-group">
                @Html.LabelFor(x => x.FullName, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(x => x.FullName, new { placeholder = Html.DisplayNameFor(x => x.FullName), @class = "span9", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.FullName)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Role, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(x => x.Role, new { placeholder = Html.DisplayNameFor(x => x.Role), @class = "span9", @readonly = "true" })
                    @Html.ValidationMessageFor(m => m.Role)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Email, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(x => x.Email, new { placeholder = Html.DisplayNameFor(x => x.Email), @class = "span9" })
                    @Html.ValidationMessageFor(m => m.Email)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Login, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(x => x.Login, new { placeholder = Html.DisplayNameFor(x => x.Login), @class = "span9" })
                    @Html.ValidationMessageFor(m => m.Login)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Password, new { @class = "control-label" })
                <div class="controls">
                    @Html.PasswordFor(x => x.Password, new { placeholder = Html.DisplayNameFor(x => x.Password), @class = "span9" })
                    @Html.ValidationMessageFor(m => m.Password)
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    @Html.CheckBoxFor(x => x.IsLocked)
                    @Html.LabelFor(x => x.IsLocked, new { @class = "lbl" })
                </div>
            </div>
            <div class="control-group isSendEmail" style="@(Model.IsLocked ? "display:none" : "")">
                <div class="controls">
                    @Html.CheckBoxFor(x => x.IsSendEmail)
                    @Html.LabelFor(x => x.IsSendEmail, new { @class = "lbl" })
                </div>
            </div>
    
            <div class="form-actions">
                <button class="btn btn-success editUserSend" type="button">
                    <i class="icon-ok bigger-110"></i>
                    Save user
                </button>
                <button onclick="javascript:fpcs.closeDialog()" class="btn btn-info" type="button">
                    <i class="icon-reply bigger-110"></i>
                    Cancel
                </button>
            </div>
        }

    </div>
</div>

@Html.Script(Scripts.Render("~/bundles/jqueryval"))